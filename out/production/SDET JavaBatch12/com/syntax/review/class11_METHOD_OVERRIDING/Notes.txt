Method Overriding in Java:
    Method Overriding happens when we have the same method names with the same signature(method name and its parameters
    are called signature of a method) in a parent class and in a child class.

Benefits:
    1) Flexibility: With the help of method overriding child classes can provide its own implementations for method
    that are present in the parent class.
    2) Polymorphism: same method can behave differently depending upon the object we call it.
Rules:
    1) There must be a parent-child relationship between the classes.
    2) The method that we are trying to override must be the same method as the parent class,
    including same name and parameters.
    3) If something doesn't participate in inheritance, we cannot override it.
        Ex: private methods, fields, and constructors
    4) If a method is declared final inside the parent class, we cannot override that method inside the child class
    5) We cannot override the static methods, but we can redeclare them.
        Ex: We cannot override the main method, but we can reuse it and overload it
    6) We cannot change the access modifiers to be more restrictive.
    7) Return type should be the same

Method Overloading                             vs               Method Overriding:
Method signature should be different                            Method signature should be the same
Return type can be different                                    Return should be the same
We don't care about the access modifiers        |               Access modifiers can be more restrictive
We don't care about the non-access modifiers                    We care about the non-access modifiers
(final, static, abstract)
We can overload constructors                                    We can't override constructors
We achieve compile time polymorphism,                           Considered run time polymorphism, dynamic polymorphism,
early binding, or static binding polymorphism                   or late binding.

Polymorphism:
Polymorphism happens when an object behaves differently
Ex: a method behaves different when we pass different parameters or when we call the method using different objects.


